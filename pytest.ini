[pytest]  # 规范

# 空格分隔，可添加多个命令行参数 -所有参数均为插件包的参数
# -s：pytest -s，对应命令行运行脚本
# --html=report/report.html：pytest --html=report/report.html，对应命令行输出测试报告
# --reruns 2：pytest --reruns 2，对应命令行失败重试指定测试脚本
# --alluredir report：对应allure报告-----已经过期
# --alluredir=report/report.html
addopts = -s --reruns 1 --alluredir=report

# 当前目录下的scripts文件夹 -可自定义
testpaths = ./scripts

# 当前目录下的scripts文件夹下，以test_开头，以.py结尾的所有文件 -可自定义
python_files = test_*.py

# 当前目录下的scripts文件夹下，以test_开头，以.py结尾的所有文件中，以Test_开头的类 -可自定义
python_classes = Test*

# 当前目录下的scripts文件夹下，以test_开头，以.py结尾的所有文件中，以Test_开头的类内，以test_开头的方法 -可自定义
python_functions = test_*


# page命名方式：具体到某个页面，例如setting应该命名为setting.py，对应的类名为SettingPage
# 如果一个单词无法命名，必须以下划线分割，例如demo_demo_demo.py，对应的类名为DemoDemoDemoPage
# test命名方式：每一个脚本文件对应一个页面，例如对应page文件为setting.py的测试脚本应该命名为test_setting.py
# 如果page页面文件名为demo_demo_demo.py，那么对应的测试脚本应该命名为test_demo_demo_demo.py
# data命名方式：对应测试脚本对应的测试页面_data.yml，有时遇到一个单词无法命名的页面，那么对应的yml文件也必须与测试页面相同
# 例如：测试脚本为，demo_demo_demo.py， 那么对应的yml文件必须为：demo_demo_demo_data.yml
# 必须严格按照此命名方式命名，否则base目录下的很多方法会引发错误，导致测试脚本失败